from sympy.ntheory import factorint

# RSA parameters (given)
n_str = (
    "58064239189884319292956385687089779965088315271876176293229248225215259127987142156916203719041903643504179773988038952959367448555579223490096940201905560178166204451599921003269827598163137665111731867736874286768718014004871562716064177111804037257357547933009298980073010557370055771714651589744855812284896487281976955737345362533799156464989951821235293056405993320450885685710268690466833940542950300653324516942585835914092645412770899589478553779463407208905239203057568602190101146868263316073139092009126221595103117152920376524518366135479323122120488899831610349805402168002102451532246337111751964020784000302654307970726182943169542840126357227063056485854954"
)
n = int(n_str)

e = 65537

ct_str = (
    "320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464"
)
ct = int(ct_str)


def compute_phi(factors):
    """
    Given a dict {p: exp}, compute phi(n) = ‚àè (p-1)*p^(exp-1)
    """
    phi = 1
    for p, exp in factors.items():
        phi *= (p - 1) * pow(p, exp - 1)
    return phi


def main():
    print("[*] Factoring n (this may take several minutes)...")
    factors = factorint(n)
    print("[*] Found factors:")
    for p, exp in factors.items():
        print(f"    {p} ^ {exp}")

    phi = compute_phi(factors)
    print("[*] Computing d = inverse of e mod phi(n)")
    d = pow(e, -1, phi)

    print("[*] Decrypting ciphertext...")
    m = pow(ct, d, n)
    flag_bytes = m.to_bytes((m.bit_length() + 7) // 8, 'big')
    try:
        flag = flag_bytes.decode()
    except UnicodeDecodeError:
        flag = flag_bytes.hex()
    print(f"[*] Flag: {flag}")


if __name__ == '__main__':
    main()