def modular_square_root(a, p):
    """
    Compute the modular square root of a modulo p using Tonelli-Shanks algorithm
    
    Args:
    a (int): The number to find square root of
    p (int): The prime modulus
    
    Returns:
    int: The smaller of the two modular square roots
    """
    # Ensure a is less than p
    a %= p
    
    # Special case for p ≡ 3 (mod 4)
    if p % 4 == 3:
        return pow(a, (p + 1) // 4, p)
    
    # Tonelli-Shanks algorithm for p ≡ 1 (mod 4)
    # First, find Q and S such that p - 1 = Q * 2^S
    Q = p - 1
    S = 0
    while Q % 2 == 0:
        Q //= 2
        S += 1
    
    # Find a non-residue z 
    z = 2
    while pow(z, (p - 1) // 2, p) == 1:
        z += 1
    
    # Initialize variables
    M = S
    c = pow(z, Q, p)
    t = pow(a, Q, p)
    R = pow(a, (Q + 1) // 2, p)
    
    # Main loop of Tonelli-Shanks
    while t != 1:
        # Find the lowest i where t^(2^i) ≡ 1 (mod p)
        i = 0
        temp = t
        while temp != 1:
            temp = (temp * temp) % p
            i += 1
            if i == M:
                # No solution exists
                raise ValueError("No square root exists")
        
        # Update variables
        b = pow(c, 1 << (M - i - 1), p)
        M = i
        c = (b * b) % p
        t = (t * c) % p
        R = (R * b) % p
    
    # Return the smaller root
    return min(R, p - R)

# Given values
a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768
p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161

# Solve for the modular square root
result = modular_square_root(a, p)
print(result)